{"version":3,"file":"static/js/9362.e4b82581.chunk.js","mappings":"+MAQA,MAsHA,EAtHcA,KAEZ,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAAEC,MAAO,GAAIC,SAAU,MAEjDC,EAAcC,IAAmBJ,EAAAA,EAAAA,WAAS,IAE1CK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GAEjCO,GAAWC,EAAAA,EAAAA,MAGXC,EAAgBC,IACpBX,EAAQY,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAACD,EAAEG,OAAOC,MAAOJ,EAAEG,OAAOE,UAoDxD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAE/BC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAACC,SAAS,YAAYC,UAAW,OAChDN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAE5BC,EAAAA,EAAAA,KAAA,OAAKI,IAAKC,EAAMC,IAAI,eAAeR,UAAU,mBAC7CE,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iBAAgBC,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oBAAmBC,SAAC,2BACjCF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBAAgBS,SApDjBC,UACnBjB,EAAEkB,iBACFtB,GAAW,GAEX,IAGE,MAAMuB,QAAiBC,OAAMC,EAAAA,EAAAA,GAAU,mBAAoB,CACzDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUtC,KAIjBuC,QAAeR,EAASS,OAG1BT,EAASU,IAAMF,EAAOG,SACxBC,EAAAA,GAAMD,QAAQH,EAAOK,SAGrBC,aAAaC,QAAQ,UAAWP,EAAOQ,KAAKC,IAC5CH,aAAaC,QAAQ,YAAaP,EAAOQ,KAAK/B,MAC9C6B,aAAaC,QAAQ,aAAc9C,EAAKG,OAExC0C,aAAaC,QAAQ,mBAAoBT,KAAKC,UAAUC,EAAOQ,KAAKE,aAAe,KAEnFxC,EAAS,qBAGTkC,EAAAA,GAAMO,MAAMX,EAAOK,SAAW,+CAElC,CAAE,MAAOhC,GAEP+B,EAAAA,GAAMO,MAAM,oCACZC,QAAQD,MAAM,mBAAoBtC,EACpC,CAAC,QACCJ,GAAW,EACb,GAY2DY,SAAA,EAErDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,EAAAA,KAAA,SACE+B,KAAK,QACLpC,KAAK,QACLgC,GAAG,QACHK,YAAY,mBACZpC,MAAOjB,EAAKG,MACZmD,SAAU3C,EACV4C,UAAQ,OAIZlC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SACE+B,KAAM/C,EAAe,OAAS,WAC9BW,KAAK,WACLgC,GAAG,WACHK,YAAY,sBACZpC,MAAOjB,EAAKI,SACZkD,SAAU3C,EACV4C,UAAQ,KAGVlC,EAAAA,EAAAA,KAAA,QACEF,UAAU,kBACVqC,QArFSC,KACrBnD,EAAgBO,IAASA,IAqFb6C,MAAOrD,EAAe,gBAAkB,gBAAgBe,SAEvDf,EAAe,eAAO,6BAK7Ba,EAAAA,EAAAA,MAAA,UAAQkC,KAAK,SAASjC,UAAU,kBAAkBwC,SAAUpD,EAAQa,SAAA,CACjEb,EAAU,gBAAkB,QAAQ,gB","sources":["admin/AdminLogin.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Used for redirection after login\r\nimport { ToastContainer, toast } from 'react-toastify'; // For displaying notifications\r\nimport 'react-toastify/dist/ReactToastify.css'; // Toastify CSS\r\nimport { getApiUrl } from '../utils/api'; // Utility function to get API endpoint URLs\r\nimport './AdminLogin.css'; // Custom CSS for the login page\r\nimport logo from '../assets/logo/Franmax_logo.png'; // Path to your company logo\r\n\r\nconst Login = () => {\r\n  // State to manage form inputs (email and password)\r\n  const [form, setForm] = useState({ email: '', password: '' });\r\n  // State to toggle password visibility in the input field\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  // State to manage loading status during API call, disables button\r\n  const [loading, setLoading] = useState(false);\r\n  // Hook from react-router-dom for programmatic navigation\r\n  const navigate = useNavigate();\r\n\r\n  // Handles changes in form input fields\r\n  const handleChange = (e) => {\r\n    setForm(prev => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  // Toggles the type of the password input field between 'password' and 'text'\r\n  const togglePassword = () => {\r\n    setShowPassword(prev => !prev);\r\n  };\r\n\r\n  // Handles the form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault(); // Prevent default form submission behavior\r\n    setLoading(true); // Set loading to true to disable the button\r\n\r\n    try {\r\n      // Make a POST request to the login API endpoint\r\n      // Ensure this points to your PHP login file (e.g., 'login.php' or 'admin-login.php')\r\n      const response = await fetch(getApiUrl('admin-login.php'), { // Changed to 'login.php' for consistency with previous examples\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json', // Indicate that the request body is JSON\r\n        },\r\n        body: JSON.stringify(form), // Convert form data to a JSON string\r\n      });\r\n\r\n      // Parse the JSON response from the server\r\n      const result = await response.json();\r\n\r\n      // Check if the HTTP response was successful (status 2xx) AND the API logic indicates success\r\n      if (response.ok && result.success) {\r\n        toast.success(result.message); // Show success notification\r\n\r\n        // ‚úÖ Store user data in localStorage for session management\r\n        localStorage.setItem('adminId', result.user.id); // Store admin's ID\r\n        localStorage.setItem('adminName', result.user.name); // Store admin's name (assuming PHP returns it)\r\n        localStorage.setItem('adminEmail', form.email); // Store admin's email from the form\r\n        // ‚úÖ NEW: Store permissions as a JSON string in localStorage\r\n        localStorage.setItem('adminPermissions', JSON.stringify(result.user.permissions || [])); \r\n\r\n        navigate('/admin/dashboard'); // Redirect to the admin dashboard page\r\n      } else {\r\n        // Handle API-specific errors (e.g., invalid credentials returned by backend)\r\n        toast.error(result.message || 'Login failed. Please check your credentials.');\r\n      }\r\n    } catch (e) {\r\n      // Catch network errors or issues with the API call itself\r\n      toast.error('Network error. Please try again.');\r\n      console.error('Login API error:', e);\r\n    } finally {\r\n      setLoading(false); // Reset loading state regardless of success or failure\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"snblogin-wrapper\">\r\n      {/* ToastContainer for displaying notifications */}\r\n      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n      <div className=\"snblogin-card\">\r\n        {/* Company Logo */}\r\n        <img src={logo} alt=\"Franmax Logo\" className=\"snblogin-logo\" />\r\n        <h2 className=\"snblogin-title\">Welcome Back</h2>\r\n        <p className=\"snblogin-subtitle\">Login to your account</p>\r\n        <form className=\"snblogin-form\" onSubmit={handleSubmit}>\r\n          {/* Email Input Group */}\r\n          <div className=\"snblogin-input-group\">\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={form.email}\r\n              onChange={handleChange}\r\n              required // HTML5 validation: field is required\r\n            />\r\n          </div>\r\n          {/* Password Input Group with Toggle */}\r\n          <div className=\"snblogin-input-group\">\r\n            <div className=\"snblogin-password-wrapper\">\r\n              <input\r\n                type={showPassword ? 'text' : 'password'} // Dynamically change input type\r\n                name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Enter your password\"\r\n                value={form.password}\r\n                onChange={handleChange}\r\n                required // HTML5 validation: field is required\r\n              />\r\n              {/* Password visibility toggle icon */}\r\n              <span\r\n                className=\"snblogin-toggle\"\r\n                onClick={togglePassword}\r\n                title={showPassword ? 'Hide Password' : 'Show Password'}\r\n              >\r\n                {showPassword ? 'üôà' : 'üëÅÔ∏è'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {/* Login Button */}\r\n          <button type=\"submit\" className=\"snblogin-button\" disabled={loading}>\r\n            {loading ? 'Logging in...' : 'Login'} {/* Change text based on loading state */}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["Login","form","setForm","useState","email","password","showPassword","setShowPassword","loading","setLoading","navigate","useNavigate","handleChange","e","prev","_objectSpread","target","name","value","_jsxs","className","children","_jsx","ToastContainer","position","autoClose","src","logo","alt","onSubmit","async","preventDefault","response","fetch","getApiUrl","method","headers","body","JSON","stringify","result","json","ok","success","toast","message","localStorage","setItem","user","id","permissions","error","console","type","placeholder","onChange","required","onClick","togglePassword","title","disabled"],"sourceRoot":""}