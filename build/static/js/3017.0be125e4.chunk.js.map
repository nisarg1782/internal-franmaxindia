{"version":3,"file":"static/js/3017.0be125e4.chunk.js","mappings":"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","sources":["brand/BrandDashboard.jsx","brand/BrandDashboardHeader.jsx","brand/BrandSidebar.jsx"],"sourcesContent":["// Updated BrandDashboard.jsx with session-based brand ID and a fallback default\r\nimport React, { useEffect, useState } from 'react';\r\nimport './brandDashboard.css';\r\nimport BrandSidebar from './BrandSidebar';\r\nimport BrandDashboardHeader from './BrandDashboardHeader';\r\nimport {\r\n    FaUsers, FaThumbsUp, FaThumbsDown, FaHandshake,\r\n    FaBan, FaEnvelopeOpenText\r\n} from 'react-icons/fa';\r\nimport {\r\n    PieChart, Pie, Cell, Tooltip, Legend,\r\n    ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid\r\n} from 'recharts';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getApiUrl } from '../utils/api';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#7B68EE'];\r\n\r\nconst BrandDashboard = () => {\r\n    const [totalInquiries, setTotalInquiries] = useState(0);\r\n    const [stateData, setStateData] = useState([]);\r\n    const [monthData, setMonthData] = useState([]);\r\n    const [remarkCounts, setRemarkCounts] = useState({});\r\n    const [brandId, setBrandId] = useState(null);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // Effect to get the brandId from the session on component load\r\n    useEffect(() => {\r\n        let idFromSession = null;\r\n        try {\r\n            const sessionString = localStorage.getItem('userSession');\r\n            if (sessionString) {\r\n                const sessionData = JSON.parse(sessionString);\r\n                if (sessionData && sessionData.id) {\r\n                    idFromSession = sessionData.id;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to parse user session:\", error);\r\n        }\r\n\r\n        // Set the brandId state with the value from the session, or a fallback default\r\n        // The default value is 'brand' as requested. You might want to use a specific default ID\r\n        // like `1` or handle this with a redirect to the login page.\r\n        if (idFromSession) {\r\n            setBrandId(idFromSession);\r\n        } else {\r\n            // setBrandId(4);\r\n            // Option 1: Set a default ID\r\n            // setBrandId(1); // For testing purposes, if you want a specific brand's data\r\n            \r\n            // Option 2: Redirect to the login page\r\n            // console.error(\"No valid brand ID found. Redirecting to login.\");\r\n            navigate('/');\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Effect to fetch data, dependent on brandId being available\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (!brandId) return; // Don't fetch if brandId isn't set yet\r\n\r\n            try {\r\n                const res = await axios.get(getApiUrl(`get_brand_inquiries.php?brand_id=${brandId}`));\r\n                const data = res.data;\r\n\r\n                setTotalInquiries(data.total || 0);\r\n\r\n                // State-wise processing\r\n                const totalState = data.statewise.reduce((sum, item) => sum + parseInt(item.count), 0);\r\n                const stateProcessed = data.statewise.map(item => ({\r\n                    name: item.state,\r\n                    value: parseInt(item.count),\r\n                    percentage: ((item.count / totalState) * 100).toFixed(1)\r\n                }));\r\n                setStateData(stateProcessed);\r\n\r\n                // Month-wise processing\r\n                const monthProcessed = data.monthly.map(entry => ({\r\n                    month: entry.month,\r\n                    enquiries: parseInt(entry.count)\r\n                }));\r\n                setMonthData(monthProcessed);\r\n\r\n                // Remark-wise processing\r\n                const remarkMap = {};\r\n                data.remarkwise?.forEach(r => {\r\n                    remarkMap[r.remark] = parseInt(r.count);\r\n                });\r\n                setRemarkCounts(remarkMap);\r\n\r\n            } catch (err) {\r\n                console.error(\"Failed to fetch dashboard data:\", err);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [brandId]); // Now the dependency is brandId\r\n\r\n    const handleRemarkClick = (remark) => {\r\n        navigate(`/brand/inquiries?remark=${encodeURIComponent(remark)}`);\r\n    };\r\n\r\n    if (!brandId) {\r\n        // You can render a loading state or a message while waiting for the ID\r\n        return <div>Loading dashboard...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"brand-crm-container\">\r\n            <BrandSidebar />\r\n            <div className=\"brand-crm-main\">\r\n                <BrandDashboardHeader />\r\n                <section className=\"brand-overview\">\r\n                    <h2>Brand Performance Overview</h2>\r\n                    <div className=\"stats-grid\">\r\n                        <div className=\"stat-card\">\r\n                            <div className=\"icon-box green\"><FaUsers /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Total Inquiries</h4>\r\n                                <p>{totalInquiries}</p>\r\n                            </div>\r\n                        </div>\r\n                        {/* Remark Cards */}\r\n                        <div className=\"stat-card clickable\" onClick={() => handleRemarkClick('interested')}>\r\n                            <div className=\"icon-box success\"><FaThumbsUp /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Interested</h4>\r\n                                <p>{remarkCounts.interested || 0}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card clickable\" onClick={() => handleRemarkClick('not interested')}>\r\n                            <div className=\"icon-box danger\"><FaThumbsDown /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Not Interested</h4>\r\n                                <p>{remarkCounts[\"not interested\"] || 0}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card clickable\" onClick={() => handleRemarkClick('deal')}>\r\n                            <div className=\"icon-box teal\"><FaHandshake /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Deal</h4>\r\n                                <p>{remarkCounts.deal || 0}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card clickable\" onClick={() => handleRemarkClick('not qualified')}>\r\n                            <div className=\"icon-box gray\"><FaBan /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Not Qualified</h4>\r\n                                <p>{remarkCounts[\"not qualified\"] || 0}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"stat-card clickable\" onClick={() => handleRemarkClick('not received')}>\r\n                            <div className=\"icon-box purple\"><FaEnvelopeOpenText /></div>\r\n                            <div className=\"text-box\">\r\n                                <h4>Not Received</h4>\r\n                                <p>{remarkCounts[\"not received\"] || 0}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"brand-charts\">\r\n                    <h3>State-wise Enquiries (Total: {totalInquiries})</h3>\r\n                    <div className=\"chart-container\">\r\n                        <ResponsiveContainer width=\"100%\" height={300}>\r\n                            <PieChart>\r\n                                <Pie\r\n                                    data={stateData}\r\n                                    cx=\"50%\"\r\n                                    cy=\"50%\"\r\n                                    outerRadius={100}\r\n                                    fill=\"#8884d8\"\r\n                                    dataKey=\"value\"\r\n                                    label={({ name, value, percentage }) =>\r\n                                        `${name} (${value}) - ${percentage}%`\r\n                                    }\r\n                                >\r\n                                    {stateData.map((entry, index) => (\r\n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                                    ))}\r\n                                </Pie>\r\n                                <Tooltip\r\n                                    formatter={(value, name, props) =>\r\n                                        [`${value} inquiries (${props.payload.percentage}%)`, 'Enquiries']\r\n                                    }\r\n                                />\r\n                                <Legend verticalAlign=\"bottom\" height={36} />\r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                    <h3 style={{ marginTop: '40px' }}>Month-wise Inquiries</h3>\r\n                    <div className=\"chart-container\">\r\n                        <ResponsiveContainer width=\"100%\" height={300}>\r\n                            <LineChart data={monthData}>\r\n                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                <XAxis dataKey=\"month\" />\r\n                                <YAxis />\r\n                                <Tooltip formatter={(value) => [`${value} Inquiries`, 'Monthly Total']} />\r\n                                <Legend />\r\n                                <Line\r\n                                    type=\"monotone\"\r\n                                    dataKey=\"enquiries\"\r\n                                    name=\"Monthly Inquiries\"\r\n                                    stroke=\"#0088FE\"\r\n                                    strokeWidth={3}\r\n                                    activeDot={{ r: 6 }}\r\n                                />\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BrandDashboard;","import React, { useState, useEffect } from 'react';\r\nimport './brandDashboard.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BrandDashboardHeader = () => {\r\n    // State to store the brand name, with a default fallback value.\r\n    const [brandName, setBrandName] = useState('Brand');\r\n      const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        try {\r\n            // Retrieve the session data from localStorage.\r\n            const sessionString = localStorage.getItem('userSession');\r\n            \r\n            if (sessionString) {\r\n                // If a session string exists, parse it.\r\n                const sessionData = JSON.parse(sessionString);\r\n                \r\n                // Check if the parsed data is valid and contains a name.\r\n                // The '|| \"Brand\"' part is a safeguard. If sessionData.name is undefined, null,\r\n                // or an empty string, it will default to \"Brand\".\r\n                setBrandName(sessionData.name || 'Brand');\r\n            }\r\n            else{\r\n                navigate(\"/\")\r\n            //    setBrandName( 'Brand');\r\n            }\r\n        } catch (error) {\r\n            // Handle cases where localStorage is not accessible or the JSON is malformed.\r\n            console.error(\"Failed to retrieve or parse user session:\", error);\r\n            // In case of an error, the state will remain its default value of 'Brand'.\r\n        }\r\n    }, []); // The empty dependency array ensures this effect runs only once on component mount.\r\n\r\n    return (\r\n        <header className=\"brand-header\">\r\n            {/* Display the personalized greeting using the state variable */}\r\n            <h1>Welcome, {brandName}!</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default BrandDashboardHeader;","// src/brand/BrandSidebar.jsx\r\nimport React, { useState } from 'react';\r\nimport './brandDashboard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaBars, FaTimes } from 'react-icons/fa';\r\n\r\nconst BrandSidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggleSidebar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`brand-sidebar ${isOpen ? 'open' : 'collapsed'}`}>\r\n        <div className=\"sidebar-header\">\r\n          {isOpen ? 'Brand CRM' : ''}\r\n          <button className=\"toggle-btn\" onClick={toggleSidebar}>\r\n            {isOpen ? <FaTimes /> : <FaBars />}\r\n          </button>\r\n        </div>\r\n        <ul className=\"sidebar-menu\">\r\n          <li><Link to=\"/brand/dashboard\">🏠 {isOpen && 'Dashboard'}</Link></li>\r\n          <li><Link to=\"/brand/inquiries\">📨 {isOpen && 'Inquiries'}</Link></li>\r\n          \r\n          {/* ✅ Upload Docs link */}\r\n          <li><Link to=\"/brand/upload-docs\">📁 {isOpen && 'Upload Docs'}</Link></li>\r\n\r\n\r\n          <div className=\"sidebar-divider\" /> {/* Divider line */}\r\n\r\n          <li><Link to=\"/brand/profile\">👤 {isOpen && 'Profile'}</Link></li>\r\n          <li><Link to=\"/pricing\">💼 {isOpen && 'Pricing'}</Link></li>\r\n          <li>\r\n            <a href=\"#\" onClick={() => {\r\n              localStorage.clear(); // or your logout logic\r\n              window.location.href = '/'; // redirect\r\n            }}>\r\n              🚪 {isOpen && 'Logout'}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BrandSidebar;\r\n"],"names":["COLORS","BrandDashboard","totalInquiries","setTotalInquiries","useState","stateData","setStateData","monthData","setMonthData","remarkCounts","setRemarkCounts","brandId","setBrandId","navigate","useNavigate","useEffect","idFromSession","sessionString","localStorage","getItem","sessionData","JSON","parse","id","error","console","async","_data$remarkwise","data","axios","get","getApiUrl","concat","total","totalState","statewise","reduce","sum","item","parseInt","count","stateProcessed","map","name","state","value","percentage","toFixed","monthProcessed","monthly","entry","month","enquiries","remarkMap","remarkwise","forEach","r","remark","err","fetchData","handleRemarkClick","encodeURIComponent","_jsxs","className","children","_jsx","BrandSidebar","BrandDashboardHeader","FaUsers","onClick","FaThumbsUp","interested","FaThumbsDown","FaHandshake","deal","FaBan","FaEnvelopeOpenText","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","outerRadius","fill","dataKey","label","_ref","index","Cell","length","Tooltip","formatter","props","payload","Legend","verticalAlign","style","marginTop","LineChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Line","type","stroke","strokeWidth","activeDot","brandName","setBrandName","isOpen","setIsOpen","_Fragment","toggleSidebar","FaTimes","FaBars","Link","to","href","clear","window","location"],"sourceRoot":""}