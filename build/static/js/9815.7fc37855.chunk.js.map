{"version":3,"file":"static/js/9815.7fc37855.chunk.js","mappings":"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","sources":["brand/BrandSidebar.jsx","brand/PricingPlans.jsx"],"sourcesContent":["// src/brand/BrandSidebar.jsx\r\nimport React, { useState } from 'react';\r\nimport './brandDashboard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaBars, FaTimes } from 'react-icons/fa';\r\n\r\nconst BrandSidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggleSidebar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`brand-sidebar ${isOpen ? 'open' : 'collapsed'}`}>\r\n        <div className=\"sidebar-header\">\r\n          {isOpen ? 'Brand CRM' : ''}\r\n          <button className=\"toggle-btn\" onClick={toggleSidebar}>\r\n            {isOpen ? <FaTimes /> : <FaBars />}\r\n          </button>\r\n        </div>\r\n        <ul className=\"sidebar-menu\">\r\n          <li><Link to=\"/brand/dashboard\">üè† {isOpen && 'Dashboard'}</Link></li>\r\n          <li><Link to=\"/brand/inquiries\">üì® {isOpen && 'Inquiries'}</Link></li>\r\n          \r\n          {/* ‚úÖ Upload Docs link */}\r\n          <li><Link to=\"/brand/upload-docs\">üìÅ {isOpen && 'Upload Docs'}</Link></li>\r\n\r\n\r\n          <div className=\"sidebar-divider\" /> {/* Divider line */}\r\n\r\n          <li><Link to=\"/brand/profile\">üë§ {isOpen && 'Profile'}</Link></li>\r\n          <li><Link to=\"/pricing\">üíº {isOpen && 'Pricing'}</Link></li>\r\n          <li>\r\n            <a href=\"#\" onClick={() => {\r\n              localStorage.clear(); // or your logout logic\r\n              window.location.href = '/'; // redirect\r\n            }}>\r\n              üö™ {isOpen && 'Logout'}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BrandSidebar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './PricingPlans.css';\r\nimport { FaCheckCircle } from 'react-icons/fa';\r\nimport BrandSidebar from './BrandSidebar';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getApiUrl } from '../utils/api';\r\n\r\n// Razorpay script loader\r\nconst loadRazorpay = (src) => {\r\n  return new Promise((resolve) => {\r\n    const script = document.createElement('script');\r\n    script.src = src;\r\n    script.onload = () => resolve(true);\r\n    script.onerror = () => resolve(false);\r\n    document.body.appendChild(script);\r\n  });\r\n};\r\n\r\nconst BrandPricingPlans = () => {\r\n  const [plans, setPlans] = useState([]);\r\n  const [user, setUser] = useState(null);\r\n  const [loadingPayment, setLoadingPayment] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  // Check brand session\r\n  useEffect(() => {\r\n    const sessionData = localStorage.getItem('userSession');\r\n    if (sessionData) {\r\n      const userData = JSON.parse(sessionData);\r\n      if (userData.user_type === 'brand') {\r\n        setUser(userData);\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    } else {\r\n      navigate('/');\r\n    }\r\n  }, [navigate]);\r\n\r\n  // Fetch brand plans\r\n  useEffect(() => {\r\n    fetch(getApiUrl('get-plans-with-benefits.php'))\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.success) {\r\n          setPlans(data.plans);\r\n        }\r\n      })\r\n      .catch(err => console.error('Error fetching brand plans:', err));\r\n  }, []);\r\n\r\n  // Start Razorpay payment\r\n  const startPayment = async (plan) => {\r\n    if (!user) {\r\n      alert('Please login as brand to proceed.');\r\n      return;\r\n    }\r\n\r\n    setLoadingPayment(true);\r\n\r\n    const razorpayLoaded = await loadRazorpay('https://checkout.razorpay.com/v1/checkout.js');\r\n    if (!razorpayLoaded) {\r\n      alert('Failed to load Razorpay. Check your internet connection.');\r\n      setLoadingPayment(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const options = {\r\n        key: 'rzp_live_R80fc1Istwbzk9', // Replace with your live Razorpay key\r\n        amount: plan.price * 100, // amount in paise\r\n        currency: 'INR',\r\n        name: 'FRANMAX INDIA',\r\n        description: 'Payment for your selected brand plan',\r\n        image: 'http://franmaxindia.com/images/icon.png',\r\n        theme: { color: '#156beb' },\r\n        prefill: {\r\n          name: user.name,\r\n          email: user.email,\r\n          contact: user.mobile\r\n        },\r\n        handler: async function (response) {\r\n          try {\r\n            const paymentDateTime = new Date().toISOString();\r\n\r\n            const verifyResp = await fetch(getApiUrl('submit_brand_payment.php'), {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify({\r\n                payment_id: response.razorpay_payment_id,\r\n                payment_date_time: paymentDateTime,\r\n                user_id: user.id,       // from brand session\r\n                plan_id: plan.id,\r\n                amount: plan.price,\r\n                month: plan.time_duration // Ensure backend expects this as months\r\n              })\r\n            });\r\n\r\n            const verifyData = await verifyResp.json();\r\n            if (verifyData.status === 'success') {\r\n              alert(`Payment successful!\\nPlan Start: ${verifyData.plan_start_date}\\nPlan End: ${verifyData.plan_end_date}`);\r\n            } else {\r\n              alert('Payment recorded, but server returned an error: ' + verifyData.message);\r\n            }\r\n          } catch (err) {\r\n            console.error('Verification error:', err);\r\n            alert('Payment successful, but server verification failed.');\r\n          }\r\n        }\r\n      };\r\n\r\n      const rzp1 = new window.Razorpay(options);\r\n      rzp1.open();\r\n    } catch (err) {\r\n      console.error('Payment error:', err);\r\n      alert('Something went wrong while initiating payment.');\r\n    }\r\n\r\n    setLoadingPayment(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pricing-wrapper\">\r\n      <BrandSidebar />\r\n      <div className=\"pricing-main\">\r\n        <h1 className=\"plans-title\">Choose the Brand Plan That Fits You Best</h1>\r\n        <p className=\"plans-subtitle\">\r\n          All brand plans include unique benefits tailored to your growth.\r\n        </p>\r\n\r\n        <div className=\"plans-container\">\r\n          {plans.length === 0 ? (\r\n            <p className=\"loading-msg\">Loading plans...</p>\r\n          ) : (\r\n            plans.map((plan, i) => (\r\n              <div className=\"plan-card\" key={i}>\r\n                <h3>{plan.name}</h3>\r\n                <p className=\"price\">‚Çπ{plan.price}</p>\r\n                <p className=\"duration\">{plan.time_duration} Month(s)</p>\r\n                <ul className=\"features\">\r\n                  {(Array.isArray(plan.benefits) ? plan.benefits : []).map(\r\n                    (benefit, idx) => (\r\n                      <li key={idx}>\r\n                        <FaCheckCircle className=\"icon\" /> {benefit}\r\n                      </li>\r\n                    )\r\n                  )}\r\n                </ul>\r\n                <button\r\n                  className=\"get-started-btn\"\r\n                  onClick={() => startPayment(plan)}\r\n                  disabled={loadingPayment}\r\n                >\r\n                  {loadingPayment ? 'Processing...' : 'Get Started'}\r\n                </button>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BrandPricingPlans;\r\n"],"names":["BrandSidebar","isOpen","setIsOpen","useState","_jsx","_Fragment","children","_jsxs","className","concat","onClick","toggleSidebar","FaTimes","FaBars","Link","to","href","localStorage","clear","window","location","BrandPricingPlans","plans","setPlans","user","setUser","loadingPayment","setLoadingPayment","navigate","useNavigate","useEffect","sessionData","getItem","userData","JSON","parse","user_type","fetch","getApiUrl","then","res","json","data","success","catch","err","console","error","startPayment","async","alert","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","options","key","amount","plan","price","currency","name","description","image","theme","color","prefill","email","contact","mobile","handler","response","paymentDateTime","Date","toISOString","verifyResp","method","headers","stringify","payment_id","razorpay_payment_id","payment_date_time","user_id","id","plan_id","month","time_duration","verifyData","status","plan_start_date","plan_end_date","message","Razorpay","open","length","map","i","Array","isArray","benefits","benefit","idx","FaCheckCircle","disabled"],"sourceRoot":""}