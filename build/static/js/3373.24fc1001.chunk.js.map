{"version":3,"file":"static/js/3373.24fc1001.chunk.js","mappings":"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","sources":["brand/UploadDocs.jsx","brand/BrandDashboardHeader.jsx","brand/BrandSidebar.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './UploadDocs.css';\r\nimport BrandSidebar from './BrandSidebar';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getApiUrl,getImageUrl} from '../utils/api';\r\nimport BrandDashboardHeader from './BrandDashboardHeader';\r\n\r\nconst imageLabels = [\r\n    { key: \"logo\", label: \"Logo\" },\r\n    { key: \"primaryImage\", label: \"Primary Image\" },\r\n    { key: \"listingImage\", label: \"Listing Page Image\" },\r\n    { key: \"detailImage1\", label: \"Detail Page Image 1\" },\r\n    { key: \"detailImage2\", label: \"Detail Page Image 2\" }\r\n];\r\n\r\nconst UploadDocs = () => {\r\n    const [formData, setFormData] = useState({});\r\n    const [existingUrls, setExistingUrls] = useState({});\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [brandId, setBrandId] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    // Effect to get the brandId from the session on component load\r\n    useEffect(() => {\r\n        let idFromSession = null;\r\n        try {\r\n            const sessionString = localStorage.getItem('userSession');\r\n            if (sessionString) {\r\n                const sessionData = JSON.parse(sessionString);\r\n                if (sessionData && sessionData.id) {\r\n                    idFromSession = sessionData.id;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to parse user session:\", error);\r\n        }\r\n\r\n        if (idFromSession) {\r\n            setBrandId(idFromSession);\r\n        } else {\r\n            console.error(\"No valid brand ID found. Redirecting to login.\");\r\n            navigate('/');\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Fetch previously uploaded images based on brandId\r\n    useEffect(() => {\r\n        const fetchExistingDocs = async () => {\r\n            if (!brandId) return; // Wait until brandId is available\r\n\r\n            try {\r\n                const res = await fetch(getApiUrl(`get-docs.php?brand_id=${brandId}`));\r\n                const data = await res.json();\r\n                if (data.success) {\r\n                    setExistingUrls(data.images || {});\r\n                } else {\r\n                    toast.error(data.message || \"Failed to load images.\");\r\n                }\r\n            } catch (err) {\r\n                toast.error(\"Error fetching uploaded images.\");\r\n                console.error(\"Error fetching uploaded images:\", err);\r\n            }\r\n        };\r\n\r\n        fetchExistingDocs();\r\n    }, [brandId]); // This effect now depends on `brandId`\r\n\r\n    const handleFileSelect = (e, key) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setFormData(prev => ({ ...prev, [key]: file }));\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Check for missing images before upload\r\n        const missing = imageLabels.filter(({ key }) => !formData[key] && !existingUrls[key]);\r\n        if (missing.length > 0) {\r\n            toast.error(`Missing image: ${missing[0].label}`);\r\n            return;\r\n        }\r\n\r\n        const data = new FormData();\r\n        imageLabels.forEach(({ key }) => {\r\n            if (formData[key]) data.append(key, formData[key]);\r\n        });\r\n\r\n        // Use the brandId from state\r\n        if (brandId) {\r\n            data.append('brand_id', brandId);\r\n        } else {\r\n            toast.error(\"Brand ID not found. Please log in again.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setIsUploading(true);\r\n            const res = await fetch(getApiUrl('upload-docs.php'), {\r\n                method: 'POST',\r\n                body: data\r\n            });\r\n            const result = await res.json();\r\n            setIsUploading(false);\r\n\r\n            if (result.success) {\r\n                toast.success(result.message || \"Files uploaded successfully!\");\r\n                setFormData({});\r\n                if (result.files) {\r\n                    setExistingUrls(prevUrls => ({ ...prevUrls, ...result.files }));\r\n                }\r\n            } else {\r\n                if (result.errors) {\r\n                    result.errors.forEach(errorMsg => {\r\n                        toast.error(errorMsg);\r\n                    });\r\n                } else {\r\n                    toast.error(result.message || \"Upload failed.\");\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setIsUploading(false);\r\n            toast.error(\"Error uploading files.\");\r\n        }\r\n    };\r\n\r\n    const renderPreview = (file, key) => {\r\n        if (file) {\r\n            return URL.createObjectURL(file);\r\n        } else if (existingUrls[key]) {\r\n            return existingUrls[key];\r\n        }\r\n        return null;\r\n    };\r\n\r\n    if (!brandId) {\r\n        return (\r\n            <div className=\"upload-layout\">\r\n                <BrandSidebar />\r\n                <div className=\"upload-wrapper\">\r\n                    <p>Redirecting to login...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"upload-layout\">\r\n            <BrandSidebar />\r\n            <div className=\"upload-wrapper\">\r\n                <BrandDashboardHeader /> {/* Added BrandDashboardHeader here */}\r\n                <ToastContainer />\r\n\r\n                {isUploading && (\r\n                    <div className=\"upload-overlay\">\r\n                        <div className=\"upload-loader\">Uploading...</div>\r\n                    </div>\r\n                )}\r\n\r\n                <h2>Upload Brand Images</h2>\r\n                <form className=\"upload-form\" onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n                    <div className=\"upload-grid\">\r\n                        {imageLabels.map(({ key, label }) => (\r\n                            <div className=\"upload-slot\" key={key}>\r\n                                <label>{label}</label>\r\n                                <div className=\"upload-box\">\r\n                                    {renderPreview(formData[key], key) ? (\r\n                                        <img\r\n                                            src={getImageUrl(renderPreview(formData[key], key))}\r\n                                            alt={`${label} Preview`}\r\n                                            className=\"upload-thumbnail\"\r\n                                        />\r\n                                    ) : (\r\n                                        <span className=\"upload-placeholder\">Choose file</span>\r\n                                    )}\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        accept=\"image/*\"\r\n                                        onChange={(e) => handleFileSelect(e, key)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <button type=\"submit\" disabled={isUploading}>\r\n                        {isUploading ? \"Uploading...\" : \"Upload Documents\"}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadDocs;","import React, { useState, useEffect } from 'react';\r\nimport './brandDashboard.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BrandDashboardHeader = () => {\r\n    // State to store the brand name, with a default fallback value.\r\n    const [brandName, setBrandName] = useState('Brand');\r\n      const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        try {\r\n            // Retrieve the session data from localStorage.\r\n            const sessionString = localStorage.getItem('userSession');\r\n            \r\n            if (sessionString) {\r\n                // If a session string exists, parse it.\r\n                const sessionData = JSON.parse(sessionString);\r\n                \r\n                // Check if the parsed data is valid and contains a name.\r\n                // The '|| \"Brand\"' part is a safeguard. If sessionData.name is undefined, null,\r\n                // or an empty string, it will default to \"Brand\".\r\n                setBrandName(sessionData.name || 'Brand');\r\n            }\r\n            else{\r\n                navigate(\"/\")\r\n            //    setBrandName( 'Brand');\r\n            }\r\n        } catch (error) {\r\n            // Handle cases where localStorage is not accessible or the JSON is malformed.\r\n            console.error(\"Failed to retrieve or parse user session:\", error);\r\n            // In case of an error, the state will remain its default value of 'Brand'.\r\n        }\r\n    }, []); // The empty dependency array ensures this effect runs only once on component mount.\r\n\r\n    return (\r\n        <header className=\"brand-header\">\r\n            {/* Display the personalized greeting using the state variable */}\r\n            <h1>Welcome, {brandName}!</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default BrandDashboardHeader;","// src/brand/BrandSidebar.jsx\r\nimport React, { useState } from 'react';\r\nimport './brandDashboard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaBars, FaTimes } from 'react-icons/fa';\r\n\r\nconst BrandSidebar = () => {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const toggleSidebar = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`brand-sidebar ${isOpen ? 'open' : 'collapsed'}`}>\r\n        <div className=\"sidebar-header\">\r\n          {isOpen ? 'Brand CRM' : ''}\r\n          <button className=\"toggle-btn\" onClick={toggleSidebar}>\r\n            {isOpen ? <FaTimes /> : <FaBars />}\r\n          </button>\r\n        </div>\r\n        <ul className=\"sidebar-menu\">\r\n          <li><Link to=\"/brand/dashboard\">🏠 {isOpen && 'Dashboard'}</Link></li>\r\n          <li><Link to=\"/brand/inquiries\">📨 {isOpen && 'Inquiries'}</Link></li>\r\n          \r\n          {/* ✅ Upload Docs link */}\r\n          <li><Link to=\"/brand/upload-docs\">📁 {isOpen && 'Upload Docs'}</Link></li>\r\n\r\n\r\n          <div className=\"sidebar-divider\" /> {/* Divider line */}\r\n\r\n          <li><Link to=\"/brand/profile\">👤 {isOpen && 'Profile'}</Link></li>\r\n          <li><Link to=\"/pricing\">💼 {isOpen && 'Pricing'}</Link></li>\r\n          <li>\r\n            <a href=\"#\" onClick={() => {\r\n              localStorage.clear(); // or your logout logic\r\n              window.location.href = '/'; // redirect\r\n            }}>\r\n              🚪 {isOpen && 'Logout'}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BrandSidebar;\r\n"],"names":["imageLabels","key","label","UploadDocs","formData","setFormData","useState","existingUrls","setExistingUrls","isUploading","setIsUploading","brandId","setBrandId","navigate","useNavigate","useEffect","idFromSession","sessionString","localStorage","getItem","sessionData","JSON","parse","id","error","console","async","res","fetch","getApiUrl","concat","data","json","success","images","toast","message","err","fetchExistingDocs","renderPreview","file","URL","createObjectURL","_jsxs","className","children","_jsx","BrandSidebar","BrandDashboardHeader","ToastContainer","onSubmit","e","preventDefault","missing","filter","_ref","length","FormData","forEach","_ref2","append","method","body","result","files","prevUrls","_objectSpread","errors","errorMsg","encType","map","_ref3","src","getImageUrl","alt","type","accept","onChange","handleFileSelect","target","prev","disabled","brandName","setBrandName","name","isOpen","setIsOpen","_Fragment","onClick","toggleSidebar","FaTimes","FaBars","Link","to","href","clear","window","location"],"sourceRoot":""}